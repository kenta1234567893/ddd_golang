// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kenta1234567893/upsider-coding-test/ent/customer"
	"github.com/kenta1234567893/upsider-coding-test/ent/customerbank"
)

// CustomerBankCreate is the builder for creating a CustomerBank entity.
type CustomerBankCreate struct {
	config
	mutation *CustomerBankMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cbc *CustomerBankCreate) SetCreatedAt(t time.Time) *CustomerBankCreate {
	cbc.mutation.SetCreatedAt(t)
	return cbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cbc *CustomerBankCreate) SetNillableCreatedAt(t *time.Time) *CustomerBankCreate {
	if t != nil {
		cbc.SetCreatedAt(*t)
	}
	return cbc
}

// SetUpdatedAt sets the "updated_at" field.
func (cbc *CustomerBankCreate) SetUpdatedAt(t time.Time) *CustomerBankCreate {
	cbc.mutation.SetUpdatedAt(t)
	return cbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cbc *CustomerBankCreate) SetNillableUpdatedAt(t *time.Time) *CustomerBankCreate {
	if t != nil {
		cbc.SetUpdatedAt(*t)
	}
	return cbc
}

// SetBankName sets the "bank_name" field.
func (cbc *CustomerBankCreate) SetBankName(s string) *CustomerBankCreate {
	cbc.mutation.SetBankName(s)
	return cbc
}

// SetBranchName sets the "branch_name" field.
func (cbc *CustomerBankCreate) SetBranchName(s string) *CustomerBankCreate {
	cbc.mutation.SetBranchName(s)
	return cbc
}

// SetBankAccountNumber sets the "bank_account_number" field.
func (cbc *CustomerBankCreate) SetBankAccountNumber(s string) *CustomerBankCreate {
	cbc.mutation.SetBankAccountNumber(s)
	return cbc
}

// SetBankAccountName sets the "bank_account_name" field.
func (cbc *CustomerBankCreate) SetBankAccountName(s string) *CustomerBankCreate {
	cbc.mutation.SetBankAccountName(s)
	return cbc
}

// SetID sets the "id" field.
func (cbc *CustomerBankCreate) SetID(u uint64) *CustomerBankCreate {
	cbc.mutation.SetID(u)
	return cbc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cbc *CustomerBankCreate) SetCustomerID(id uint64) *CustomerBankCreate {
	cbc.mutation.SetCustomerID(id)
	return cbc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cbc *CustomerBankCreate) SetCustomer(c *Customer) *CustomerBankCreate {
	return cbc.SetCustomerID(c.ID)
}

// Mutation returns the CustomerBankMutation object of the builder.
func (cbc *CustomerBankCreate) Mutation() *CustomerBankMutation {
	return cbc.mutation
}

// Save creates the CustomerBank in the database.
func (cbc *CustomerBankCreate) Save(ctx context.Context) (*CustomerBank, error) {
	cbc.defaults()
	return withHooks(ctx, cbc.sqlSave, cbc.mutation, cbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CustomerBankCreate) SaveX(ctx context.Context) *CustomerBank {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CustomerBankCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CustomerBankCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *CustomerBankCreate) defaults() {
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		v := customerbank.DefaultCreatedAt()
		cbc.mutation.SetCreatedAt(v)
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		v := customerbank.DefaultUpdatedAt()
		cbc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CustomerBankCreate) check() error {
	if _, ok := cbc.mutation.BankName(); !ok {
		return &ValidationError{Name: "bank_name", err: errors.New(`ent: missing required field "CustomerBank.bank_name"`)}
	}
	if _, ok := cbc.mutation.BranchName(); !ok {
		return &ValidationError{Name: "branch_name", err: errors.New(`ent: missing required field "CustomerBank.branch_name"`)}
	}
	if _, ok := cbc.mutation.BankAccountNumber(); !ok {
		return &ValidationError{Name: "bank_account_number", err: errors.New(`ent: missing required field "CustomerBank.bank_account_number"`)}
	}
	if _, ok := cbc.mutation.BankAccountName(); !ok {
		return &ValidationError{Name: "bank_account_name", err: errors.New(`ent: missing required field "CustomerBank.bank_account_name"`)}
	}
	if len(cbc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "CustomerBank.customer"`)}
	}
	return nil
}

func (cbc *CustomerBankCreate) sqlSave(ctx context.Context) (*CustomerBank, error) {
	if err := cbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	cbc.mutation.id = &_node.ID
	cbc.mutation.done = true
	return _node, nil
}

func (cbc *CustomerBankCreate) createSpec() (*CustomerBank, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomerBank{config: cbc.config}
		_spec = sqlgraph.NewCreateSpec(customerbank.Table, sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64))
	)
	if id, ok := cbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cbc.mutation.CreatedAt(); ok {
		_spec.SetField(customerbank.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cbc.mutation.UpdatedAt(); ok {
		_spec.SetField(customerbank.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cbc.mutation.BankName(); ok {
		_spec.SetField(customerbank.FieldBankName, field.TypeString, value)
		_node.BankName = value
	}
	if value, ok := cbc.mutation.BranchName(); ok {
		_spec.SetField(customerbank.FieldBranchName, field.TypeString, value)
		_node.BranchName = value
	}
	if value, ok := cbc.mutation.BankAccountNumber(); ok {
		_spec.SetField(customerbank.FieldBankAccountNumber, field.TypeString, value)
		_node.BankAccountNumber = value
	}
	if value, ok := cbc.mutation.BankAccountName(); ok {
		_spec.SetField(customerbank.FieldBankAccountName, field.TypeString, value)
		_node.BankAccountName = value
	}
	if nodes := cbc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerbank.CustomerTable,
			Columns: []string{customerbank.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_customer_banks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerBankCreateBulk is the builder for creating many CustomerBank entities in bulk.
type CustomerBankCreateBulk struct {
	config
	err      error
	builders []*CustomerBankCreate
}

// Save creates the CustomerBank entities in the database.
func (cbcb *CustomerBankCreateBulk) Save(ctx context.Context) ([]*CustomerBank, error) {
	if cbcb.err != nil {
		return nil, cbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CustomerBank, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerBankMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CustomerBankCreateBulk) SaveX(ctx context.Context) []*CustomerBank {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CustomerBankCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CustomerBankCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
