// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kenta1234567893/upsider-coding-test/ent/company"
	"github.com/kenta1234567893/upsider-coding-test/ent/customer"
	"github.com/kenta1234567893/upsider-coding-test/ent/invoice"
	"github.com/kenta1234567893/upsider-coding-test/ent/predicate"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InvoiceUpdate) SetUpdatedAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iu *InvoiceUpdate) ClearUpdatedAt() *InvoiceUpdate {
	iu.mutation.ClearUpdatedAt()
	return iu
}

// SetIssueDate sets the "issue_date" field.
func (iu *InvoiceUpdate) SetIssueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetIssueDate(t)
	return iu
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIssueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetIssueDate(*t)
	}
	return iu
}

// SetPaymentAmount sets the "payment_amount" field.
func (iu *InvoiceUpdate) SetPaymentAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetPaymentAmount()
	iu.mutation.SetPaymentAmount(f)
	return iu
}

// SetNillablePaymentAmount sets the "payment_amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillablePaymentAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetPaymentAmount(*f)
	}
	return iu
}

// AddPaymentAmount adds f to the "payment_amount" field.
func (iu *InvoiceUpdate) AddPaymentAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddPaymentAmount(f)
	return iu
}

// SetFee sets the "fee" field.
func (iu *InvoiceUpdate) SetFee(f float64) *InvoiceUpdate {
	iu.mutation.ResetFee()
	iu.mutation.SetFee(f)
	return iu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableFee(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetFee(*f)
	}
	return iu
}

// AddFee adds f to the "fee" field.
func (iu *InvoiceUpdate) AddFee(f float64) *InvoiceUpdate {
	iu.mutation.AddFee(f)
	return iu
}

// SetFeeRate sets the "fee_rate" field.
func (iu *InvoiceUpdate) SetFeeRate(f float64) *InvoiceUpdate {
	iu.mutation.ResetFeeRate()
	iu.mutation.SetFeeRate(f)
	return iu
}

// SetNillableFeeRate sets the "fee_rate" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableFeeRate(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetFeeRate(*f)
	}
	return iu
}

// AddFeeRate adds f to the "fee_rate" field.
func (iu *InvoiceUpdate) AddFeeRate(f float64) *InvoiceUpdate {
	iu.mutation.AddFeeRate(f)
	return iu
}

// SetTax sets the "tax" field.
func (iu *InvoiceUpdate) SetTax(f float64) *InvoiceUpdate {
	iu.mutation.ResetTax()
	iu.mutation.SetTax(f)
	return iu
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTax(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTax(*f)
	}
	return iu
}

// AddTax adds f to the "tax" field.
func (iu *InvoiceUpdate) AddTax(f float64) *InvoiceUpdate {
	iu.mutation.AddTax(f)
	return iu
}

// SetTaxRate sets the "tax_rate" field.
func (iu *InvoiceUpdate) SetTaxRate(f float64) *InvoiceUpdate {
	iu.mutation.ResetTaxRate()
	iu.mutation.SetTaxRate(f)
	return iu
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableTaxRate(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetTaxRate(*f)
	}
	return iu
}

// AddTaxRate adds f to the "tax_rate" field.
func (iu *InvoiceUpdate) AddTaxRate(f float64) *InvoiceUpdate {
	iu.mutation.AddTaxRate(f)
	return iu
}

// SetBillingAmount sets the "billing_amount" field.
func (iu *InvoiceUpdate) SetBillingAmount(f float64) *InvoiceUpdate {
	iu.mutation.ResetBillingAmount()
	iu.mutation.SetBillingAmount(f)
	return iu
}

// SetNillableBillingAmount sets the "billing_amount" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableBillingAmount(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetBillingAmount(*f)
	}
	return iu
}

// AddBillingAmount adds f to the "billing_amount" field.
func (iu *InvoiceUpdate) AddBillingAmount(f float64) *InvoiceUpdate {
	iu.mutation.AddBillingAmount(f)
	return iu
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (iu *InvoiceUpdate) SetPaymentDueDate(t time.Time) *InvoiceUpdate {
	iu.mutation.SetPaymentDueDate(t)
	return iu
}

// SetNillablePaymentDueDate sets the "payment_due_date" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillablePaymentDueDate(t *time.Time) *InvoiceUpdate {
	if t != nil {
		iu.SetPaymentDueDate(*t)
	}
	return iu
}

// SetStatus sets the "status" field.
func (iu *InvoiceUpdate) SetStatus(s string) *InvoiceUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableStatus(s *string) *InvoiceUpdate {
	if s != nil {
		iu.SetStatus(*s)
	}
	return iu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (iu *InvoiceUpdate) SetCompanyID(id uint64) *InvoiceUpdate {
	iu.mutation.SetCompanyID(id)
	return iu
}

// SetCompany sets the "company" edge to the Company entity.
func (iu *InvoiceUpdate) SetCompany(c *Company) *InvoiceUpdate {
	return iu.SetCompanyID(c.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iu *InvoiceUpdate) SetCustomerID(id uint64) *InvoiceUpdate {
	iu.mutation.SetCustomerID(id)
	return iu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iu *InvoiceUpdate) SetCustomer(c *Customer) *InvoiceUpdate {
	return iu.SetCustomerID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (iu *InvoiceUpdate) ClearCompany() *InvoiceUpdate {
	iu.mutation.ClearCompany()
	return iu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iu *InvoiceUpdate) ClearCustomer() *InvoiceUpdate {
	iu.mutation.ClearCustomer()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InvoiceUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok && !iu.mutation.UpdatedAtCleared() {
		v := invoice.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if iu.mutation.CompanyCleared() && len(iu.mutation.CompanyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.company"`)
	}
	if iu.mutation.CustomerCleared() && len(iu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.customer"`)
	}
	return nil
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iu.mutation.CreatedAtCleared() {
		_spec.ClearField(invoice.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.UpdatedAtCleared() {
		_spec.ClearField(invoice.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.PaymentAmount(); ok {
		_spec.SetField(invoice.FieldPaymentAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPaymentAmount(); ok {
		_spec.AddField(invoice.FieldPaymentAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Fee(); ok {
		_spec.SetField(invoice.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedFee(); ok {
		_spec.AddField(invoice.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.FeeRate(); ok {
		_spec.SetField(invoice.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedFeeRate(); ok {
		_spec.AddField(invoice.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.Tax(); ok {
		_spec.SetField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTax(); ok {
		_spec.AddField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.TaxRate(); ok {
		_spec.SetField(invoice.FieldTaxRate, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedTaxRate(); ok {
		_spec.AddField(invoice.FieldTaxRate, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.BillingAmount(); ok {
		_spec.SetField(invoice.FieldBillingAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedBillingAmount(); ok {
		_spec.AddField(invoice.FieldBillingAmount, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.PaymentDueDate(); ok {
		_spec.SetField(invoice.FieldPaymentDueDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
	}
	if iu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InvoiceUpdateOne) SetUpdatedAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iuo *InvoiceUpdateOne) ClearUpdatedAt() *InvoiceUpdateOne {
	iuo.mutation.ClearUpdatedAt()
	return iuo
}

// SetIssueDate sets the "issue_date" field.
func (iuo *InvoiceUpdateOne) SetIssueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetIssueDate(t)
	return iuo
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIssueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetIssueDate(*t)
	}
	return iuo
}

// SetPaymentAmount sets the "payment_amount" field.
func (iuo *InvoiceUpdateOne) SetPaymentAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetPaymentAmount()
	iuo.mutation.SetPaymentAmount(f)
	return iuo
}

// SetNillablePaymentAmount sets the "payment_amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillablePaymentAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetPaymentAmount(*f)
	}
	return iuo
}

// AddPaymentAmount adds f to the "payment_amount" field.
func (iuo *InvoiceUpdateOne) AddPaymentAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddPaymentAmount(f)
	return iuo
}

// SetFee sets the "fee" field.
func (iuo *InvoiceUpdateOne) SetFee(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetFee()
	iuo.mutation.SetFee(f)
	return iuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableFee(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetFee(*f)
	}
	return iuo
}

// AddFee adds f to the "fee" field.
func (iuo *InvoiceUpdateOne) AddFee(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddFee(f)
	return iuo
}

// SetFeeRate sets the "fee_rate" field.
func (iuo *InvoiceUpdateOne) SetFeeRate(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetFeeRate()
	iuo.mutation.SetFeeRate(f)
	return iuo
}

// SetNillableFeeRate sets the "fee_rate" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableFeeRate(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetFeeRate(*f)
	}
	return iuo
}

// AddFeeRate adds f to the "fee_rate" field.
func (iuo *InvoiceUpdateOne) AddFeeRate(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddFeeRate(f)
	return iuo
}

// SetTax sets the "tax" field.
func (iuo *InvoiceUpdateOne) SetTax(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTax()
	iuo.mutation.SetTax(f)
	return iuo
}

// SetNillableTax sets the "tax" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTax(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTax(*f)
	}
	return iuo
}

// AddTax adds f to the "tax" field.
func (iuo *InvoiceUpdateOne) AddTax(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTax(f)
	return iuo
}

// SetTaxRate sets the "tax_rate" field.
func (iuo *InvoiceUpdateOne) SetTaxRate(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetTaxRate()
	iuo.mutation.SetTaxRate(f)
	return iuo
}

// SetNillableTaxRate sets the "tax_rate" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableTaxRate(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetTaxRate(*f)
	}
	return iuo
}

// AddTaxRate adds f to the "tax_rate" field.
func (iuo *InvoiceUpdateOne) AddTaxRate(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddTaxRate(f)
	return iuo
}

// SetBillingAmount sets the "billing_amount" field.
func (iuo *InvoiceUpdateOne) SetBillingAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetBillingAmount()
	iuo.mutation.SetBillingAmount(f)
	return iuo
}

// SetNillableBillingAmount sets the "billing_amount" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableBillingAmount(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetBillingAmount(*f)
	}
	return iuo
}

// AddBillingAmount adds f to the "billing_amount" field.
func (iuo *InvoiceUpdateOne) AddBillingAmount(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddBillingAmount(f)
	return iuo
}

// SetPaymentDueDate sets the "payment_due_date" field.
func (iuo *InvoiceUpdateOne) SetPaymentDueDate(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetPaymentDueDate(t)
	return iuo
}

// SetNillablePaymentDueDate sets the "payment_due_date" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillablePaymentDueDate(t *time.Time) *InvoiceUpdateOne {
	if t != nil {
		iuo.SetPaymentDueDate(*t)
	}
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InvoiceUpdateOne) SetStatus(s string) *InvoiceUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableStatus(s *string) *InvoiceUpdateOne {
	if s != nil {
		iuo.SetStatus(*s)
	}
	return iuo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (iuo *InvoiceUpdateOne) SetCompanyID(id uint64) *InvoiceUpdateOne {
	iuo.mutation.SetCompanyID(id)
	return iuo
}

// SetCompany sets the "company" edge to the Company entity.
func (iuo *InvoiceUpdateOne) SetCompany(c *Company) *InvoiceUpdateOne {
	return iuo.SetCompanyID(c.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (iuo *InvoiceUpdateOne) SetCustomerID(id uint64) *InvoiceUpdateOne {
	iuo.mutation.SetCustomerID(id)
	return iuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) SetCustomer(c *Customer) *InvoiceUpdateOne {
	return iuo.SetCustomerID(c.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (iuo *InvoiceUpdateOne) ClearCompany() *InvoiceUpdateOne {
	iuo.mutation.ClearCompany()
	return iuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (iuo *InvoiceUpdateOne) ClearCustomer() *InvoiceUpdateOne {
	iuo.mutation.ClearCustomer()
	return iuo
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InvoiceUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok && !iuo.mutation.UpdatedAtCleared() {
		v := invoice.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if iuo.mutation.CompanyCleared() && len(iuo.mutation.CompanyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.company"`)
	}
	if iuo.mutation.CustomerCleared() && len(iuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.customer"`)
	}
	return nil
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iuo.mutation.CreatedAtCleared() {
		_spec.ClearField(invoice.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(invoice.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.IssueDate(); ok {
		_spec.SetField(invoice.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.PaymentAmount(); ok {
		_spec.SetField(invoice.FieldPaymentAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPaymentAmount(); ok {
		_spec.AddField(invoice.FieldPaymentAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Fee(); ok {
		_spec.SetField(invoice.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedFee(); ok {
		_spec.AddField(invoice.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.FeeRate(); ok {
		_spec.SetField(invoice.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedFeeRate(); ok {
		_spec.AddField(invoice.FieldFeeRate, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.Tax(); ok {
		_spec.SetField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTax(); ok {
		_spec.AddField(invoice.FieldTax, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.TaxRate(); ok {
		_spec.SetField(invoice.FieldTaxRate, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedTaxRate(); ok {
		_spec.AddField(invoice.FieldTaxRate, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.BillingAmount(); ok {
		_spec.SetField(invoice.FieldBillingAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedBillingAmount(); ok {
		_spec.AddField(invoice.FieldBillingAmount, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.PaymentDueDate(); ok {
		_spec.SetField(invoice.FieldPaymentDueDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
	}
	if iuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CompanyTable,
			Columns: []string{invoice.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invoice.CustomerTable,
			Columns: []string{invoice.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
