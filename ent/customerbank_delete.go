// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kenta1234567893/upsider-coding-test/ent/customerbank"
	"github.com/kenta1234567893/upsider-coding-test/ent/predicate"
)

// CustomerBankDelete is the builder for deleting a CustomerBank entity.
type CustomerBankDelete struct {
	config
	hooks    []Hook
	mutation *CustomerBankMutation
}

// Where appends a list predicates to the CustomerBankDelete builder.
func (cbd *CustomerBankDelete) Where(ps ...predicate.CustomerBank) *CustomerBankDelete {
	cbd.mutation.Where(ps...)
	return cbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cbd *CustomerBankDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cbd.sqlExec, cbd.mutation, cbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cbd *CustomerBankDelete) ExecX(ctx context.Context) int {
	n, err := cbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cbd *CustomerBankDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(customerbank.Table, sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64))
	if ps := cbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cbd.mutation.done = true
	return affected, err
}

// CustomerBankDeleteOne is the builder for deleting a single CustomerBank entity.
type CustomerBankDeleteOne struct {
	cbd *CustomerBankDelete
}

// Where appends a list predicates to the CustomerBankDelete builder.
func (cbdo *CustomerBankDeleteOne) Where(ps ...predicate.CustomerBank) *CustomerBankDeleteOne {
	cbdo.cbd.mutation.Where(ps...)
	return cbdo
}

// Exec executes the deletion query.
func (cbdo *CustomerBankDeleteOne) Exec(ctx context.Context) error {
	n, err := cbdo.cbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{customerbank.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cbdo *CustomerBankDeleteOne) ExecX(ctx context.Context) {
	if err := cbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
