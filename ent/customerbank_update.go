// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kenta1234567893/upsider-coding-test/ent/customer"
	"github.com/kenta1234567893/upsider-coding-test/ent/customerbank"
	"github.com/kenta1234567893/upsider-coding-test/ent/predicate"
)

// CustomerBankUpdate is the builder for updating CustomerBank entities.
type CustomerBankUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerBankMutation
}

// Where appends a list predicates to the CustomerBankUpdate builder.
func (cbu *CustomerBankUpdate) Where(ps ...predicate.CustomerBank) *CustomerBankUpdate {
	cbu.mutation.Where(ps...)
	return cbu
}

// SetUpdatedAt sets the "updated_at" field.
func (cbu *CustomerBankUpdate) SetUpdatedAt(t time.Time) *CustomerBankUpdate {
	cbu.mutation.SetUpdatedAt(t)
	return cbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cbu *CustomerBankUpdate) ClearUpdatedAt() *CustomerBankUpdate {
	cbu.mutation.ClearUpdatedAt()
	return cbu
}

// SetBankName sets the "bank_name" field.
func (cbu *CustomerBankUpdate) SetBankName(s string) *CustomerBankUpdate {
	cbu.mutation.SetBankName(s)
	return cbu
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (cbu *CustomerBankUpdate) SetNillableBankName(s *string) *CustomerBankUpdate {
	if s != nil {
		cbu.SetBankName(*s)
	}
	return cbu
}

// SetBranchName sets the "branch_name" field.
func (cbu *CustomerBankUpdate) SetBranchName(s string) *CustomerBankUpdate {
	cbu.mutation.SetBranchName(s)
	return cbu
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (cbu *CustomerBankUpdate) SetNillableBranchName(s *string) *CustomerBankUpdate {
	if s != nil {
		cbu.SetBranchName(*s)
	}
	return cbu
}

// SetBankAccountNumber sets the "bank_account_number" field.
func (cbu *CustomerBankUpdate) SetBankAccountNumber(s string) *CustomerBankUpdate {
	cbu.mutation.SetBankAccountNumber(s)
	return cbu
}

// SetNillableBankAccountNumber sets the "bank_account_number" field if the given value is not nil.
func (cbu *CustomerBankUpdate) SetNillableBankAccountNumber(s *string) *CustomerBankUpdate {
	if s != nil {
		cbu.SetBankAccountNumber(*s)
	}
	return cbu
}

// SetBankAccountName sets the "bank_account_name" field.
func (cbu *CustomerBankUpdate) SetBankAccountName(s string) *CustomerBankUpdate {
	cbu.mutation.SetBankAccountName(s)
	return cbu
}

// SetNillableBankAccountName sets the "bank_account_name" field if the given value is not nil.
func (cbu *CustomerBankUpdate) SetNillableBankAccountName(s *string) *CustomerBankUpdate {
	if s != nil {
		cbu.SetBankAccountName(*s)
	}
	return cbu
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cbu *CustomerBankUpdate) SetCustomerID(id uint64) *CustomerBankUpdate {
	cbu.mutation.SetCustomerID(id)
	return cbu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cbu *CustomerBankUpdate) SetCustomer(c *Customer) *CustomerBankUpdate {
	return cbu.SetCustomerID(c.ID)
}

// Mutation returns the CustomerBankMutation object of the builder.
func (cbu *CustomerBankUpdate) Mutation() *CustomerBankMutation {
	return cbu.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cbu *CustomerBankUpdate) ClearCustomer() *CustomerBankUpdate {
	cbu.mutation.ClearCustomer()
	return cbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cbu *CustomerBankUpdate) Save(ctx context.Context) (int, error) {
	cbu.defaults()
	return withHooks(ctx, cbu.sqlSave, cbu.mutation, cbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *CustomerBankUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *CustomerBankUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *CustomerBankUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbu *CustomerBankUpdate) defaults() {
	if _, ok := cbu.mutation.UpdatedAt(); !ok && !cbu.mutation.UpdatedAtCleared() {
		v := customerbank.UpdateDefaultUpdatedAt()
		cbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbu *CustomerBankUpdate) check() error {
	if cbu.mutation.CustomerCleared() && len(cbu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CustomerBank.customer"`)
	}
	return nil
}

func (cbu *CustomerBankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerbank.Table, customerbank.Columns, sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64))
	if ps := cbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cbu.mutation.CreatedAtCleared() {
		_spec.ClearField(customerbank.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cbu.mutation.UpdatedAt(); ok {
		_spec.SetField(customerbank.FieldUpdatedAt, field.TypeTime, value)
	}
	if cbu.mutation.UpdatedAtCleared() {
		_spec.ClearField(customerbank.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cbu.mutation.BankName(); ok {
		_spec.SetField(customerbank.FieldBankName, field.TypeString, value)
	}
	if value, ok := cbu.mutation.BranchName(); ok {
		_spec.SetField(customerbank.FieldBranchName, field.TypeString, value)
	}
	if value, ok := cbu.mutation.BankAccountNumber(); ok {
		_spec.SetField(customerbank.FieldBankAccountNumber, field.TypeString, value)
	}
	if value, ok := cbu.mutation.BankAccountName(); ok {
		_spec.SetField(customerbank.FieldBankAccountName, field.TypeString, value)
	}
	if cbu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerbank.CustomerTable,
			Columns: []string{customerbank.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerbank.CustomerTable,
			Columns: []string{customerbank.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerbank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cbu.mutation.done = true
	return n, nil
}

// CustomerBankUpdateOne is the builder for updating a single CustomerBank entity.
type CustomerBankUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerBankMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cbuo *CustomerBankUpdateOne) SetUpdatedAt(t time.Time) *CustomerBankUpdateOne {
	cbuo.mutation.SetUpdatedAt(t)
	return cbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cbuo *CustomerBankUpdateOne) ClearUpdatedAt() *CustomerBankUpdateOne {
	cbuo.mutation.ClearUpdatedAt()
	return cbuo
}

// SetBankName sets the "bank_name" field.
func (cbuo *CustomerBankUpdateOne) SetBankName(s string) *CustomerBankUpdateOne {
	cbuo.mutation.SetBankName(s)
	return cbuo
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (cbuo *CustomerBankUpdateOne) SetNillableBankName(s *string) *CustomerBankUpdateOne {
	if s != nil {
		cbuo.SetBankName(*s)
	}
	return cbuo
}

// SetBranchName sets the "branch_name" field.
func (cbuo *CustomerBankUpdateOne) SetBranchName(s string) *CustomerBankUpdateOne {
	cbuo.mutation.SetBranchName(s)
	return cbuo
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (cbuo *CustomerBankUpdateOne) SetNillableBranchName(s *string) *CustomerBankUpdateOne {
	if s != nil {
		cbuo.SetBranchName(*s)
	}
	return cbuo
}

// SetBankAccountNumber sets the "bank_account_number" field.
func (cbuo *CustomerBankUpdateOne) SetBankAccountNumber(s string) *CustomerBankUpdateOne {
	cbuo.mutation.SetBankAccountNumber(s)
	return cbuo
}

// SetNillableBankAccountNumber sets the "bank_account_number" field if the given value is not nil.
func (cbuo *CustomerBankUpdateOne) SetNillableBankAccountNumber(s *string) *CustomerBankUpdateOne {
	if s != nil {
		cbuo.SetBankAccountNumber(*s)
	}
	return cbuo
}

// SetBankAccountName sets the "bank_account_name" field.
func (cbuo *CustomerBankUpdateOne) SetBankAccountName(s string) *CustomerBankUpdateOne {
	cbuo.mutation.SetBankAccountName(s)
	return cbuo
}

// SetNillableBankAccountName sets the "bank_account_name" field if the given value is not nil.
func (cbuo *CustomerBankUpdateOne) SetNillableBankAccountName(s *string) *CustomerBankUpdateOne {
	if s != nil {
		cbuo.SetBankAccountName(*s)
	}
	return cbuo
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cbuo *CustomerBankUpdateOne) SetCustomerID(id uint64) *CustomerBankUpdateOne {
	cbuo.mutation.SetCustomerID(id)
	return cbuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cbuo *CustomerBankUpdateOne) SetCustomer(c *Customer) *CustomerBankUpdateOne {
	return cbuo.SetCustomerID(c.ID)
}

// Mutation returns the CustomerBankMutation object of the builder.
func (cbuo *CustomerBankUpdateOne) Mutation() *CustomerBankMutation {
	return cbuo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (cbuo *CustomerBankUpdateOne) ClearCustomer() *CustomerBankUpdateOne {
	cbuo.mutation.ClearCustomer()
	return cbuo
}

// Where appends a list predicates to the CustomerBankUpdate builder.
func (cbuo *CustomerBankUpdateOne) Where(ps ...predicate.CustomerBank) *CustomerBankUpdateOne {
	cbuo.mutation.Where(ps...)
	return cbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cbuo *CustomerBankUpdateOne) Select(field string, fields ...string) *CustomerBankUpdateOne {
	cbuo.fields = append([]string{field}, fields...)
	return cbuo
}

// Save executes the query and returns the updated CustomerBank entity.
func (cbuo *CustomerBankUpdateOne) Save(ctx context.Context) (*CustomerBank, error) {
	cbuo.defaults()
	return withHooks(ctx, cbuo.sqlSave, cbuo.mutation, cbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *CustomerBankUpdateOne) SaveX(ctx context.Context) *CustomerBank {
	node, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbuo *CustomerBankUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *CustomerBankUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbuo *CustomerBankUpdateOne) defaults() {
	if _, ok := cbuo.mutation.UpdatedAt(); !ok && !cbuo.mutation.UpdatedAtCleared() {
		v := customerbank.UpdateDefaultUpdatedAt()
		cbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbuo *CustomerBankUpdateOne) check() error {
	if cbuo.mutation.CustomerCleared() && len(cbuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CustomerBank.customer"`)
	}
	return nil
}

func (cbuo *CustomerBankUpdateOne) sqlSave(ctx context.Context) (_node *CustomerBank, err error) {
	if err := cbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customerbank.Table, customerbank.Columns, sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64))
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomerBank.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customerbank.FieldID)
		for _, f := range fields {
			if !customerbank.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customerbank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cbuo.mutation.CreatedAtCleared() {
		_spec.ClearField(customerbank.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customerbank.FieldUpdatedAt, field.TypeTime, value)
	}
	if cbuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(customerbank.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cbuo.mutation.BankName(); ok {
		_spec.SetField(customerbank.FieldBankName, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.BranchName(); ok {
		_spec.SetField(customerbank.FieldBranchName, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.BankAccountNumber(); ok {
		_spec.SetField(customerbank.FieldBankAccountNumber, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.BankAccountName(); ok {
		_spec.SetField(customerbank.FieldBankAccountName, field.TypeString, value)
	}
	if cbuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerbank.CustomerTable,
			Columns: []string{customerbank.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customerbank.CustomerTable,
			Columns: []string{customerbank.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomerBank{config: cbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customerbank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cbuo.mutation.done = true
	return _node, nil
}
