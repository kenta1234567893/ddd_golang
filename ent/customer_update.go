// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kenta1234567893/upsider-coding-test/ent/customer"
	"github.com/kenta1234567893/upsider-coding-test/ent/customerbank"
	"github.com/kenta1234567893/upsider-coding-test/ent/invoice"
	"github.com/kenta1234567893/upsider-coding-test/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CustomerUpdate) ClearUpdatedAt() *CustomerUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetCompanyName sets the "company_name" field.
func (cu *CustomerUpdate) SetCompanyName(s string) *CustomerUpdate {
	cu.mutation.SetCompanyName(s)
	return cu
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCompanyName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCompanyName(*s)
	}
	return cu
}

// SetCeoName sets the "ceo_name" field.
func (cu *CustomerUpdate) SetCeoName(s string) *CustomerUpdate {
	cu.mutation.SetCeoName(s)
	return cu
}

// SetNillableCeoName sets the "ceo_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCeoName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCeoName(*s)
	}
	return cu
}

// SetPhoneNumber sets the "phone_number" field.
func (cu *CustomerUpdate) SetPhoneNumber(s string) *CustomerUpdate {
	cu.mutation.SetPhoneNumber(s)
	return cu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillablePhoneNumber(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetPhoneNumber(*s)
	}
	return cu
}

// SetZipCode sets the "zip_code" field.
func (cu *CustomerUpdate) SetZipCode(s string) *CustomerUpdate {
	cu.mutation.SetZipCode(s)
	return cu
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableZipCode(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetZipCode(*s)
	}
	return cu
}

// SetAddress sets the "address" field.
func (cu *CustomerUpdate) SetAddress(s string) *CustomerUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableAddress(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// AddCustomerBankIDs adds the "customer_banks" edge to the CustomerBank entity by IDs.
func (cu *CustomerUpdate) AddCustomerBankIDs(ids ...uint64) *CustomerUpdate {
	cu.mutation.AddCustomerBankIDs(ids...)
	return cu
}

// AddCustomerBanks adds the "customer_banks" edges to the CustomerBank entity.
func (cu *CustomerUpdate) AddCustomerBanks(c ...*CustomerBank) *CustomerUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCustomerBankIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (cu *CustomerUpdate) AddInvoiceIDs(ids ...uint64) *CustomerUpdate {
	cu.mutation.AddInvoiceIDs(ids...)
	return cu
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (cu *CustomerUpdate) AddInvoices(i ...*Invoice) *CustomerUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddInvoiceIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearCustomerBanks clears all "customer_banks" edges to the CustomerBank entity.
func (cu *CustomerUpdate) ClearCustomerBanks() *CustomerUpdate {
	cu.mutation.ClearCustomerBanks()
	return cu
}

// RemoveCustomerBankIDs removes the "customer_banks" edge to CustomerBank entities by IDs.
func (cu *CustomerUpdate) RemoveCustomerBankIDs(ids ...uint64) *CustomerUpdate {
	cu.mutation.RemoveCustomerBankIDs(ids...)
	return cu
}

// RemoveCustomerBanks removes "customer_banks" edges to CustomerBank entities.
func (cu *CustomerUpdate) RemoveCustomerBanks(c ...*CustomerBank) *CustomerUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCustomerBankIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (cu *CustomerUpdate) ClearInvoices() *CustomerUpdate {
	cu.mutation.ClearInvoices()
	return cu
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (cu *CustomerUpdate) RemoveInvoiceIDs(ids ...uint64) *CustomerUpdate {
	cu.mutation.RemoveInvoiceIDs(ids...)
	return cu
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (cu *CustomerUpdate) RemoveInvoices(i ...*Invoice) *CustomerUpdate {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveInvoiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(customer.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(customer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.CompanyName(); ok {
		_spec.SetField(customer.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := cu.mutation.CeoName(); ok {
		_spec.SetField(customer.FieldCeoName, field.TypeString, value)
	}
	if value, ok := cu.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cu.mutation.ZipCode(); ok {
		_spec.SetField(customer.FieldZipCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(customer.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.CustomerBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBanksTable,
			Columns: []string{customer.CustomerBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCustomerBanksIDs(); len(nodes) > 0 && !cu.mutation.CustomerBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBanksTable,
			Columns: []string{customer.CustomerBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CustomerBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBanksTable,
			Columns: []string{customer.CustomerBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !cu.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CustomerUpdateOne) ClearUpdatedAt() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetCompanyName sets the "company_name" field.
func (cuo *CustomerUpdateOne) SetCompanyName(s string) *CustomerUpdateOne {
	cuo.mutation.SetCompanyName(s)
	return cuo
}

// SetNillableCompanyName sets the "company_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCompanyName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCompanyName(*s)
	}
	return cuo
}

// SetCeoName sets the "ceo_name" field.
func (cuo *CustomerUpdateOne) SetCeoName(s string) *CustomerUpdateOne {
	cuo.mutation.SetCeoName(s)
	return cuo
}

// SetNillableCeoName sets the "ceo_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCeoName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCeoName(*s)
	}
	return cuo
}

// SetPhoneNumber sets the "phone_number" field.
func (cuo *CustomerUpdateOne) SetPhoneNumber(s string) *CustomerUpdateOne {
	cuo.mutation.SetPhoneNumber(s)
	return cuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillablePhoneNumber(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetPhoneNumber(*s)
	}
	return cuo
}

// SetZipCode sets the "zip_code" field.
func (cuo *CustomerUpdateOne) SetZipCode(s string) *CustomerUpdateOne {
	cuo.mutation.SetZipCode(s)
	return cuo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableZipCode(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetZipCode(*s)
	}
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CustomerUpdateOne) SetAddress(s string) *CustomerUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableAddress(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// AddCustomerBankIDs adds the "customer_banks" edge to the CustomerBank entity by IDs.
func (cuo *CustomerUpdateOne) AddCustomerBankIDs(ids ...uint64) *CustomerUpdateOne {
	cuo.mutation.AddCustomerBankIDs(ids...)
	return cuo
}

// AddCustomerBanks adds the "customer_banks" edges to the CustomerBank entity.
func (cuo *CustomerUpdateOne) AddCustomerBanks(c ...*CustomerBank) *CustomerUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCustomerBankIDs(ids...)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (cuo *CustomerUpdateOne) AddInvoiceIDs(ids ...uint64) *CustomerUpdateOne {
	cuo.mutation.AddInvoiceIDs(ids...)
	return cuo
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (cuo *CustomerUpdateOne) AddInvoices(i ...*Invoice) *CustomerUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddInvoiceIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearCustomerBanks clears all "customer_banks" edges to the CustomerBank entity.
func (cuo *CustomerUpdateOne) ClearCustomerBanks() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerBanks()
	return cuo
}

// RemoveCustomerBankIDs removes the "customer_banks" edge to CustomerBank entities by IDs.
func (cuo *CustomerUpdateOne) RemoveCustomerBankIDs(ids ...uint64) *CustomerUpdateOne {
	cuo.mutation.RemoveCustomerBankIDs(ids...)
	return cuo
}

// RemoveCustomerBanks removes "customer_banks" edges to CustomerBank entities.
func (cuo *CustomerUpdateOne) RemoveCustomerBanks(c ...*CustomerBank) *CustomerUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCustomerBankIDs(ids...)
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (cuo *CustomerUpdateOne) ClearInvoices() *CustomerUpdateOne {
	cuo.mutation.ClearInvoices()
	return cuo
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (cuo *CustomerUpdateOne) RemoveInvoiceIDs(ids ...uint64) *CustomerUpdateOne {
	cuo.mutation.RemoveInvoiceIDs(ids...)
	return cuo
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (cuo *CustomerUpdateOne) RemoveInvoices(i ...*Invoice) *CustomerUpdateOne {
	ids := make([]uint64, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveInvoiceIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(customer.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(customer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.CompanyName(); ok {
		_spec.SetField(customer.FieldCompanyName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CeoName(); ok {
		_spec.SetField(customer.FieldCeoName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.PhoneNumber(); ok {
		_spec.SetField(customer.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ZipCode(); ok {
		_spec.SetField(customer.FieldZipCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(customer.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.CustomerBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBanksTable,
			Columns: []string{customer.CustomerBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCustomerBanksIDs(); len(nodes) > 0 && !cuo.mutation.CustomerBanksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBanksTable,
			Columns: []string{customer.CustomerBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CustomerBanksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.CustomerBanksTable,
			Columns: []string{customer.CustomerBanksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customerbank.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !cuo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.InvoicesTable,
			Columns: []string{customer.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
