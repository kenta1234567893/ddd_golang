// Code generated by ent, DO NOT EDIT.

package customerbank

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kenta1234567893/upsider-coding-test/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldUpdatedAt, v))
}

// BankName applies equality check predicate on the "bank_name" field. It's identical to BankNameEQ.
func BankName(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBankName, v))
}

// BranchName applies equality check predicate on the "branch_name" field. It's identical to BranchNameEQ.
func BranchName(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBranchName, v))
}

// BankAccountNumber applies equality check predicate on the "bank_account_number" field. It's identical to BankAccountNumberEQ.
func BankAccountNumber(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBankAccountNumber, v))
}

// BankAccountName applies equality check predicate on the "bank_account_name" field. It's identical to BankAccountNameEQ.
func BankAccountName(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBankAccountName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotNull(FieldUpdatedAt))
}

// BankNameEQ applies the EQ predicate on the "bank_name" field.
func BankNameEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBankName, v))
}

// BankNameNEQ applies the NEQ predicate on the "bank_name" field.
func BankNameNEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldBankName, v))
}

// BankNameIn applies the In predicate on the "bank_name" field.
func BankNameIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldBankName, vs...))
}

// BankNameNotIn applies the NotIn predicate on the "bank_name" field.
func BankNameNotIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldBankName, vs...))
}

// BankNameGT applies the GT predicate on the "bank_name" field.
func BankNameGT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldBankName, v))
}

// BankNameGTE applies the GTE predicate on the "bank_name" field.
func BankNameGTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldBankName, v))
}

// BankNameLT applies the LT predicate on the "bank_name" field.
func BankNameLT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldBankName, v))
}

// BankNameLTE applies the LTE predicate on the "bank_name" field.
func BankNameLTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldBankName, v))
}

// BankNameContains applies the Contains predicate on the "bank_name" field.
func BankNameContains(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContains(FieldBankName, v))
}

// BankNameHasPrefix applies the HasPrefix predicate on the "bank_name" field.
func BankNameHasPrefix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasPrefix(FieldBankName, v))
}

// BankNameHasSuffix applies the HasSuffix predicate on the "bank_name" field.
func BankNameHasSuffix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasSuffix(FieldBankName, v))
}

// BankNameEqualFold applies the EqualFold predicate on the "bank_name" field.
func BankNameEqualFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEqualFold(FieldBankName, v))
}

// BankNameContainsFold applies the ContainsFold predicate on the "bank_name" field.
func BankNameContainsFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContainsFold(FieldBankName, v))
}

// BranchNameEQ applies the EQ predicate on the "branch_name" field.
func BranchNameEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBranchName, v))
}

// BranchNameNEQ applies the NEQ predicate on the "branch_name" field.
func BranchNameNEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldBranchName, v))
}

// BranchNameIn applies the In predicate on the "branch_name" field.
func BranchNameIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldBranchName, vs...))
}

// BranchNameNotIn applies the NotIn predicate on the "branch_name" field.
func BranchNameNotIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldBranchName, vs...))
}

// BranchNameGT applies the GT predicate on the "branch_name" field.
func BranchNameGT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldBranchName, v))
}

// BranchNameGTE applies the GTE predicate on the "branch_name" field.
func BranchNameGTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldBranchName, v))
}

// BranchNameLT applies the LT predicate on the "branch_name" field.
func BranchNameLT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldBranchName, v))
}

// BranchNameLTE applies the LTE predicate on the "branch_name" field.
func BranchNameLTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldBranchName, v))
}

// BranchNameContains applies the Contains predicate on the "branch_name" field.
func BranchNameContains(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContains(FieldBranchName, v))
}

// BranchNameHasPrefix applies the HasPrefix predicate on the "branch_name" field.
func BranchNameHasPrefix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasPrefix(FieldBranchName, v))
}

// BranchNameHasSuffix applies the HasSuffix predicate on the "branch_name" field.
func BranchNameHasSuffix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasSuffix(FieldBranchName, v))
}

// BranchNameEqualFold applies the EqualFold predicate on the "branch_name" field.
func BranchNameEqualFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEqualFold(FieldBranchName, v))
}

// BranchNameContainsFold applies the ContainsFold predicate on the "branch_name" field.
func BranchNameContainsFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContainsFold(FieldBranchName, v))
}

// BankAccountNumberEQ applies the EQ predicate on the "bank_account_number" field.
func BankAccountNumberEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBankAccountNumber, v))
}

// BankAccountNumberNEQ applies the NEQ predicate on the "bank_account_number" field.
func BankAccountNumberNEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldBankAccountNumber, v))
}

// BankAccountNumberIn applies the In predicate on the "bank_account_number" field.
func BankAccountNumberIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldBankAccountNumber, vs...))
}

// BankAccountNumberNotIn applies the NotIn predicate on the "bank_account_number" field.
func BankAccountNumberNotIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldBankAccountNumber, vs...))
}

// BankAccountNumberGT applies the GT predicate on the "bank_account_number" field.
func BankAccountNumberGT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldBankAccountNumber, v))
}

// BankAccountNumberGTE applies the GTE predicate on the "bank_account_number" field.
func BankAccountNumberGTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldBankAccountNumber, v))
}

// BankAccountNumberLT applies the LT predicate on the "bank_account_number" field.
func BankAccountNumberLT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldBankAccountNumber, v))
}

// BankAccountNumberLTE applies the LTE predicate on the "bank_account_number" field.
func BankAccountNumberLTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldBankAccountNumber, v))
}

// BankAccountNumberContains applies the Contains predicate on the "bank_account_number" field.
func BankAccountNumberContains(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContains(FieldBankAccountNumber, v))
}

// BankAccountNumberHasPrefix applies the HasPrefix predicate on the "bank_account_number" field.
func BankAccountNumberHasPrefix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasPrefix(FieldBankAccountNumber, v))
}

// BankAccountNumberHasSuffix applies the HasSuffix predicate on the "bank_account_number" field.
func BankAccountNumberHasSuffix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasSuffix(FieldBankAccountNumber, v))
}

// BankAccountNumberEqualFold applies the EqualFold predicate on the "bank_account_number" field.
func BankAccountNumberEqualFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEqualFold(FieldBankAccountNumber, v))
}

// BankAccountNumberContainsFold applies the ContainsFold predicate on the "bank_account_number" field.
func BankAccountNumberContainsFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContainsFold(FieldBankAccountNumber, v))
}

// BankAccountNameEQ applies the EQ predicate on the "bank_account_name" field.
func BankAccountNameEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEQ(FieldBankAccountName, v))
}

// BankAccountNameNEQ applies the NEQ predicate on the "bank_account_name" field.
func BankAccountNameNEQ(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNEQ(FieldBankAccountName, v))
}

// BankAccountNameIn applies the In predicate on the "bank_account_name" field.
func BankAccountNameIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldIn(FieldBankAccountName, vs...))
}

// BankAccountNameNotIn applies the NotIn predicate on the "bank_account_name" field.
func BankAccountNameNotIn(vs ...string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldNotIn(FieldBankAccountName, vs...))
}

// BankAccountNameGT applies the GT predicate on the "bank_account_name" field.
func BankAccountNameGT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGT(FieldBankAccountName, v))
}

// BankAccountNameGTE applies the GTE predicate on the "bank_account_name" field.
func BankAccountNameGTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldGTE(FieldBankAccountName, v))
}

// BankAccountNameLT applies the LT predicate on the "bank_account_name" field.
func BankAccountNameLT(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLT(FieldBankAccountName, v))
}

// BankAccountNameLTE applies the LTE predicate on the "bank_account_name" field.
func BankAccountNameLTE(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldLTE(FieldBankAccountName, v))
}

// BankAccountNameContains applies the Contains predicate on the "bank_account_name" field.
func BankAccountNameContains(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContains(FieldBankAccountName, v))
}

// BankAccountNameHasPrefix applies the HasPrefix predicate on the "bank_account_name" field.
func BankAccountNameHasPrefix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasPrefix(FieldBankAccountName, v))
}

// BankAccountNameHasSuffix applies the HasSuffix predicate on the "bank_account_name" field.
func BankAccountNameHasSuffix(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldHasSuffix(FieldBankAccountName, v))
}

// BankAccountNameEqualFold applies the EqualFold predicate on the "bank_account_name" field.
func BankAccountNameEqualFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldEqualFold(FieldBankAccountName, v))
}

// BankAccountNameContainsFold applies the ContainsFold predicate on the "bank_account_name" field.
func BankAccountNameContainsFold(v string) predicate.CustomerBank {
	return predicate.CustomerBank(sql.FieldContainsFold(FieldBankAccountName, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.CustomerBank {
	return predicate.CustomerBank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.CustomerBank {
	return predicate.CustomerBank(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomerBank) predicate.CustomerBank {
	return predicate.CustomerBank(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomerBank) predicate.CustomerBank {
	return predicate.CustomerBank(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomerBank) predicate.CustomerBank {
	return predicate.CustomerBank(sql.NotPredicates(p))
}
