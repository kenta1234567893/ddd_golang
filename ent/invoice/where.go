// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kenta1234567893/upsider-coding-test/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedAt, v))
}

// IssueDate applies equality check predicate on the "issue_date" field. It's identical to IssueDateEQ.
func IssueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIssueDate, v))
}

// PaymentAmount applies equality check predicate on the "payment_amount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentAmount, v))
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFee, v))
}

// FeeRate applies equality check predicate on the "fee_rate" field. It's identical to FeeRateEQ.
func FeeRate(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFeeRate, v))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTax, v))
}

// TaxRate applies equality check predicate on the "tax_rate" field. It's identical to TaxRateEQ.
func TaxRate(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTaxRate, v))
}

// BillingAmount applies equality check predicate on the "billing_amount" field. It's identical to BillingAmountEQ.
func BillingAmount(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingAmount, v))
}

// PaymentDueDate applies equality check predicate on the "payment_due_date" field. It's identical to PaymentDueDateEQ.
func PaymentDueDate(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentDueDate, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Invoice {
	return predicate.Invoice(sql.FieldNotNull(FieldUpdatedAt))
}

// IssueDateEQ applies the EQ predicate on the "issue_date" field.
func IssueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldIssueDate, v))
}

// IssueDateNEQ applies the NEQ predicate on the "issue_date" field.
func IssueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldIssueDate, v))
}

// IssueDateIn applies the In predicate on the "issue_date" field.
func IssueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldIssueDate, vs...))
}

// IssueDateNotIn applies the NotIn predicate on the "issue_date" field.
func IssueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldIssueDate, vs...))
}

// IssueDateGT applies the GT predicate on the "issue_date" field.
func IssueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldIssueDate, v))
}

// IssueDateGTE applies the GTE predicate on the "issue_date" field.
func IssueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldIssueDate, v))
}

// IssueDateLT applies the LT predicate on the "issue_date" field.
func IssueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldIssueDate, v))
}

// IssueDateLTE applies the LTE predicate on the "issue_date" field.
func IssueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldIssueDate, v))
}

// PaymentAmountEQ applies the EQ predicate on the "payment_amount" field.
func PaymentAmountEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentAmount, v))
}

// PaymentAmountNEQ applies the NEQ predicate on the "payment_amount" field.
func PaymentAmountNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaymentAmount, v))
}

// PaymentAmountIn applies the In predicate on the "payment_amount" field.
func PaymentAmountIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaymentAmount, vs...))
}

// PaymentAmountNotIn applies the NotIn predicate on the "payment_amount" field.
func PaymentAmountNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaymentAmount, vs...))
}

// PaymentAmountGT applies the GT predicate on the "payment_amount" field.
func PaymentAmountGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaymentAmount, v))
}

// PaymentAmountGTE applies the GTE predicate on the "payment_amount" field.
func PaymentAmountGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaymentAmount, v))
}

// PaymentAmountLT applies the LT predicate on the "payment_amount" field.
func PaymentAmountLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaymentAmount, v))
}

// PaymentAmountLTE applies the LTE predicate on the "payment_amount" field.
func PaymentAmountLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaymentAmount, v))
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFee, v))
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldFee, v))
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldFee, vs...))
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldFee, vs...))
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldFee, v))
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldFee, v))
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldFee, v))
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldFee, v))
}

// FeeRateEQ applies the EQ predicate on the "fee_rate" field.
func FeeRateEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldFeeRate, v))
}

// FeeRateNEQ applies the NEQ predicate on the "fee_rate" field.
func FeeRateNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldFeeRate, v))
}

// FeeRateIn applies the In predicate on the "fee_rate" field.
func FeeRateIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldFeeRate, vs...))
}

// FeeRateNotIn applies the NotIn predicate on the "fee_rate" field.
func FeeRateNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldFeeRate, vs...))
}

// FeeRateGT applies the GT predicate on the "fee_rate" field.
func FeeRateGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldFeeRate, v))
}

// FeeRateGTE applies the GTE predicate on the "fee_rate" field.
func FeeRateGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldFeeRate, v))
}

// FeeRateLT applies the LT predicate on the "fee_rate" field.
func FeeRateLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldFeeRate, v))
}

// FeeRateLTE applies the LTE predicate on the "fee_rate" field.
func FeeRateLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldFeeRate, v))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTax, v))
}

// TaxRateEQ applies the EQ predicate on the "tax_rate" field.
func TaxRateEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTaxRate, v))
}

// TaxRateNEQ applies the NEQ predicate on the "tax_rate" field.
func TaxRateNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTaxRate, v))
}

// TaxRateIn applies the In predicate on the "tax_rate" field.
func TaxRateIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTaxRate, vs...))
}

// TaxRateNotIn applies the NotIn predicate on the "tax_rate" field.
func TaxRateNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTaxRate, vs...))
}

// TaxRateGT applies the GT predicate on the "tax_rate" field.
func TaxRateGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTaxRate, v))
}

// TaxRateGTE applies the GTE predicate on the "tax_rate" field.
func TaxRateGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTaxRate, v))
}

// TaxRateLT applies the LT predicate on the "tax_rate" field.
func TaxRateLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTaxRate, v))
}

// TaxRateLTE applies the LTE predicate on the "tax_rate" field.
func TaxRateLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTaxRate, v))
}

// BillingAmountEQ applies the EQ predicate on the "billing_amount" field.
func BillingAmountEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldBillingAmount, v))
}

// BillingAmountNEQ applies the NEQ predicate on the "billing_amount" field.
func BillingAmountNEQ(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldBillingAmount, v))
}

// BillingAmountIn applies the In predicate on the "billing_amount" field.
func BillingAmountIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldBillingAmount, vs...))
}

// BillingAmountNotIn applies the NotIn predicate on the "billing_amount" field.
func BillingAmountNotIn(vs ...float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldBillingAmount, vs...))
}

// BillingAmountGT applies the GT predicate on the "billing_amount" field.
func BillingAmountGT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldBillingAmount, v))
}

// BillingAmountGTE applies the GTE predicate on the "billing_amount" field.
func BillingAmountGTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldBillingAmount, v))
}

// BillingAmountLT applies the LT predicate on the "billing_amount" field.
func BillingAmountLT(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldBillingAmount, v))
}

// BillingAmountLTE applies the LTE predicate on the "billing_amount" field.
func BillingAmountLTE(v float64) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldBillingAmount, v))
}

// PaymentDueDateEQ applies the EQ predicate on the "payment_due_date" field.
func PaymentDueDateEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldPaymentDueDate, v))
}

// PaymentDueDateNEQ applies the NEQ predicate on the "payment_due_date" field.
func PaymentDueDateNEQ(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldPaymentDueDate, v))
}

// PaymentDueDateIn applies the In predicate on the "payment_due_date" field.
func PaymentDueDateIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldPaymentDueDate, vs...))
}

// PaymentDueDateNotIn applies the NotIn predicate on the "payment_due_date" field.
func PaymentDueDateNotIn(vs ...time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldPaymentDueDate, vs...))
}

// PaymentDueDateGT applies the GT predicate on the "payment_due_date" field.
func PaymentDueDateGT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldPaymentDueDate, v))
}

// PaymentDueDateGTE applies the GTE predicate on the "payment_due_date" field.
func PaymentDueDateGTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldPaymentDueDate, v))
}

// PaymentDueDateLT applies the LT predicate on the "payment_due_date" field.
func PaymentDueDateLT(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldPaymentDueDate, v))
}

// PaymentDueDateLTE applies the LTE predicate on the "payment_due_date" field.
func PaymentDueDateLTE(v time.Time) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldPaymentDueDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldStatus, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.Company) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(sql.NotPredicates(p))
}
