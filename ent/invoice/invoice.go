// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invoice type in the database.
	Label = "invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIssueDate holds the string denoting the issue_date field in the database.
	FieldIssueDate = "issue_date"
	// FieldPaymentAmount holds the string denoting the payment_amount field in the database.
	FieldPaymentAmount = "payment_amount"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldFeeRate holds the string denoting the fee_rate field in the database.
	FieldFeeRate = "fee_rate"
	// FieldTax holds the string denoting the tax field in the database.
	FieldTax = "tax"
	// FieldTaxRate holds the string denoting the tax_rate field in the database.
	FieldTaxRate = "tax_rate"
	// FieldBillingAmount holds the string denoting the billing_amount field in the database.
	FieldBillingAmount = "billing_amount"
	// FieldPaymentDueDate holds the string denoting the payment_due_date field in the database.
	FieldPaymentDueDate = "payment_due_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// Table holds the table name of the invoice in the database.
	Table = "invoices"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "invoices"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_invoices"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "invoices"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_invoices"
)

// Columns holds all SQL columns for invoice fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIssueDate,
	FieldPaymentAmount,
	FieldFee,
	FieldFeeRate,
	FieldTax,
	FieldTaxRate,
	FieldBillingAmount,
	FieldPaymentDueDate,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "invoices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_invoices",
	"customer_invoices",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Invoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIssueDate orders the results by the issue_date field.
func ByIssueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIssueDate, opts...).ToFunc()
}

// ByPaymentAmount orders the results by the payment_amount field.
func ByPaymentAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentAmount, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByFeeRate orders the results by the fee_rate field.
func ByFeeRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeeRate, opts...).ToFunc()
}

// ByTax orders the results by the tax field.
func ByTax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTax, opts...).ToFunc()
}

// ByTaxRate orders the results by the tax_rate field.
func ByTaxRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxRate, opts...).ToFunc()
}

// ByBillingAmount orders the results by the billing_amount field.
func ByBillingAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAmount, opts...).ToFunc()
}

// ByPaymentDueDate orders the results by the payment_due_date field.
func ByPaymentDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentDueDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
